22:32:25 **** Incremental Build of configuration Debug for project HelloWorld ****
make -j12 all 
'Building file: ../StdPeriph_Driver/src/stm32f4xx_qspi.c'
'Invoking: MCU GCC Compiler'
arm-none-eabi-gcc -mcpu=cortex-m4 -mthumb -mfloat-abi=hard -DSTM32F446xx -DUSE_STDPERIPH_DRIVER -I"E:\STM32nucleo\RTOS_Workspace\HelloWorld\inc" -I"E:\STM32nucleo\RTOS_Workspace\HelloWorld\Config" -I"E:\STM32nucleo\RTOS_Workspace\HelloWorld\Third_party\FreeRTOS\org\Source\portable\GCC\ARM_CM4F" -I"E:\STM32nucleo\RTOS_Workspace\HelloWorld\Third_party\FreeRTOS\org\Source\include" -I"E:\STM32nucleo\RTOS_Workspace\HelloWorld\CMSIS\core" -I"E:\STM32nucleo\RTOS_Workspace\HelloWorld\CMSIS\device" -I"E:\STM32nucleo\RTOS_Workspace\HelloWorld\StdPeriph_Driver\inc" -O0 -g1 -Wall -fmessage-length=0 -ffunction-sections -c -MMD -MP -MF"StdPeriph_Driver/src/stm32f4xx_qspi.d" -MT"StdPeriph_Driver/src/stm32f4xx_qspi.o" -o "StdPeriph_Driver/src/stm32f4xx_qspi.o" "../StdPeriph_Driver/src/stm32f4xx_qspi.c"
'Finished building: ../StdPeriph_Driver/src/stm32f4xx_qspi.c'
' '
'Building target: HelloWorld.elf'
'Invoking: MCU GCC Linker'
arm-none-eabi-gcc -mcpu=cortex-m4 -mthumb -mfloat-abi=hard -T"E:/STM32nucleo/RTOS_Workspace/HelloWorld/LinkerScript.ld" -Wl,-Map=output.map -Wl,--gc-sections -lm -o "HelloWorld.elf"  ./startup/startup_stm32.o  ./src/main.o ./src/syscalls.o ./src/system_stm32f4xx.o  ./Third_party/FreeRTOS/org/Source/portable/MemMang/heap_4.o  ./Third_party/FreeRTOS/org/Source/portable/GCC/ARM_CM4F/port.o  ./Third_party/FreeRTOS/org/Source/croutine.o ./Third_party/FreeRTOS/org/Source/event_groups.o ./Third_party/FreeRTOS/org/Source/list.o ./Third_party/FreeRTOS/org/Source/queue.o ./Third_party/FreeRTOS/org/Source/stream_buffer.o ./Third_party/FreeRTOS/org/Source/tasks.o ./Third_party/FreeRTOS/org/Source/timers.o  ./StdPeriph_Driver/src/misc.o ./StdPeriph_Driver/src/stm32f4xx_adc.o ./StdPeriph_Driver/src/stm32f4xx_can.o ./StdPeriph_Driver/src/stm32f4xx_cec.o ./StdPeriph_Driver/src/stm32f4xx_crc.o ./StdPeriph_Driver/src/stm32f4xx_cryp.o ./StdPeriph_Driver/src/stm32f4xx_cryp_aes.o ./StdPeriph_Driver/src/stm32f4xx_cryp_des.o ./StdPeriph_Driver/src/stm32f4xx_cryp_tdes.o ./StdPeriph_Driver/src/stm32f4xx_dac.o ./StdPeriph_Driver/src/stm32f4xx_dbgmcu.o ./StdPeriph_Driver/src/stm32f4xx_dcmi.o ./StdPeriph_Driver/src/stm32f4xx_dfsdm.o ./StdPeriph_Driver/src/stm32f4xx_dma.o ./StdPeriph_Driver/src/stm32f4xx_dma2d.o ./StdPeriph_Driver/src/stm32f4xx_dsi.o ./StdPeriph_Driver/src/stm32f4xx_exti.o ./StdPeriph_Driver/src/stm32f4xx_flash.o ./StdPeriph_Driver/src/stm32f4xx_flash_ramfunc.o ./StdPeriph_Driver/src/stm32f4xx_fmc.o ./StdPeriph_Driver/src/stm32f4xx_fmip2c.o ./StdPeriph_Driver/src/stm32f4xx_fsmc.o ./StdPeriph_Driver/src/stm32f4xx_gpio.o ./StdPeriph_Driver/src/stm32f4xx_hash.o ./StdPeriph_Driver/src/stm32f4xx_hash_md5.o ./StdPeriph_Driver/src/stm32f4xx_hash_sha1.o ./StdPeriph_Driver/src/stm32f4xx_i2c.o ./StdPeriph_Driver/src/stm32f4xx_iwdg.o ./StdPeriph_Driver/src/stm32f4xx_lptim.o ./StdPeriph_Driver/src/stm32f4xx_ltdc.o ./StdPeriph_Driver/src/stm32f4xx_pwr.o ./StdPeriph_Driver/src/stm32f4xx_qspi.o ./StdPeriph_Driver/src/stm32f4xx_rcc.o ./StdPeriph_Driver/src/stm32f4xx_rng.o ./StdPeriph_Driver/src/stm32f4xx_rtc.o ./StdPeriph_Driver/src/stm32f4xx_sai.o ./StdPeriph_Driver/src/stm32f4xx_sdio.o ./StdPeriph_Driver/src/stm32f4xx_spdifrx.o ./StdPeriph_Driver/src/stm32f4xx_spi.o ./StdPeriph_Driver/src/stm32f4xx_syscfg.o ./StdPeriph_Driver/src/stm32f4xx_tim.o ./StdPeriph_Driver/src/stm32f4xx_usart.o ./StdPeriph_Driver/src/stm32f4xx_wwdg.o   
'Finished building target: HelloWorld.elf'
' '
make --no-print-directory post-build
'Generating binary and Printing size information:'
arm-none-eabi-objcopy -O binary "HelloWorld.elf" "HelloWorld.bin"; arm-none-eabi-size "HelloWorld.elf"
Usage: arm-none-eabi-objcopy [option(s)] in-file [out-file]
 Copies a binary file, possibly transforming it in the process
 The options are:
  -I --input-target <bfdname>      Assume input file is in format <bfdname>
  -O --output-target <bfdname>     Create an output file in format <bfdname>
  -B --binary-architecture <arch>  Set output arch, when input is arch-less
  -F --target <bfdname>            Set both input and output format to <bfdname>
     --debugging                   Convert debugging information, if possible
  -p --preserve-dates              Copy modified/access timestamps to the output
  -D --enable-deterministic-archives
                                   Produce deterministic output when stripping archives
  -U --disable-deterministic-archives
                                   Disable -D behavior (default)
  -j --only-section <name>         Only copy section <name> into the output
     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>
  -R --remove-section <name>       Remove section <name> from the output
     --remove-relocations <name>   Remove relocations from section <name>
  -S --strip-all                   Remove all symbol and relocation information
  -g --strip-debug                 Remove all debugging symbols & sections
     --strip-dwo                   Remove all DWO sections
     --strip-unneeded              Remove all symbols not needed by relocations
  -N --strip-symbol <name>         Do not copy symbol <name>
     --strip-unneeded-symbol <name>
                                   Do not copy symbol <name> unless needed by
                                     relocations
     --only-keep-debug             Strip everything but the debug information
     --extract-dwo                 Copy only DWO sections
     --extract-symbol              Remove section contents but keep symbols
     --keep-section <name>         Do not strip section <name>
  -K --keep-symbol <name>          Do not strip symbol <name>
     --keep-file-symbols           Do not strip file symbol(s)
     --localize-hidden             Turn all ELF hidden symbols into locals
  -L --localize-symbol <name>      Force symbol <name> to be marked as a local
     --globalize-symbol <name>     Force symbol <name> to be marked as a global
  -G --keep-global-symbol <name>   Localize all symbols except <name>
  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak
     --weaken                      Force all global symbols to be marked as weak
  -w --wildcard                    Permit wildcard in symbol comparison
  -x --discard-all                 Remove all non-global symbols
  -X --discard-locals              Remove any compiler-generated symbols
  -i --interleave[=<number>]       Only copy N out of every <number> bytes
     --interleave-width <number>   Set N for --interleave
  -b --byte <num>                  Select byte <num> in every interleaved block
     --gap-fill <val>              Fill gaps between sections with <val>
     --pad-to <addr>               Pad the last section up to address <addr>
     --set-start <addr>            Set the start address to <addr>
    {--change-start|--adjust-start} <incr>
                                   Add <incr> to the start address
    {--change-addresses|--adjust-vma} <incr>
                                   Add <incr> to LMA, VMA and start addresses
    {--change-section-address|--adjust-section-vma} <name>{=|+|-}<val>
                                   Change LMA and VMA of section <name> by <val>
     --change-section-lma <name>{=|+|-}<val>
                                   Change the LMA of section <name> by <val>
     --change-section-vma <name>{=|+|-}<val>
                                   Change the VMA of section <name> by <val>
    {--[no-]change-warnings|--[no-]adjust-warnings}
                                   Warn if a named section does not exist
     --set-section-flags <name>=<flags>
                                   Set section <name>'s properties to <flags>
     --set-section-alignment <name>=<align>
                                   Set section <name>'s alignment to <align> bytes
     --add-section <name>=<file>   Add section <name> found in <file> to output
     --update-section <name>=<file>
                                   Update contents of section <name> with
                                   contents found in <file>
     --dump-section <name>=<file>  Dump the contents of section <name> into <file>
     --rename-section <old>=<new>[,<flags>] Rename section <old> to <new>
     --long-section-names {enable|disable|keep}
                                   Handle long section names in Coff objects.
     --change-leading-char         Force output format's leading character style
     --remove-leading-char         Remove leading character from global symbols
     --reverse-bytes=<num>         Reverse <num> bytes at a time, in output sections with content
     --redefine-sym <old>=<new>    Redefine symbol name <old> to <new>
     --redefine-syms <file>        --redefine-sym for all symbol pairs 
                                     listed in <file>
     --srec-len <number>           Restrict the length of generated Srecords
     --srec-forceS3                Restrict the type of generated Srecords to S3
     --strip-symbols <file>        -N for all symbols listed in <file>
     --strip-unneeded-symbols <file>
                                   --strip-unneeded-symbol for all symbols listed
                                     in <file>
     --keep-symbols <file>         -K for all symbols listed in <file>
     --localize-symbols <file>     -L for all symbols listed in <file>
     --globalize-symbols <file>    --globalize-symbol for all in <file>
     --keep-global-symbols <file>  -G for all symbols listed in <file>
     --weaken-symbols <file>       -W for all symbols listed in <file>
     --add-symbol <name>=[<section>:]<value>[,<flags>]  Add a symbol
     --alt-machine-code <index>    Use the target's <index>'th alternative machine
     --writable-text               Mark the output text as writable
     --readonly-text               Make the output text write protected
     --pure                        Mark the output file as demand paged
     --impure                      Mark the output file as impure
     --prefix-symbols <prefix>     Add <prefix> to start of every symbol name
     --prefix-sections <prefix>    Add <prefix> to start of every section name
     --prefix-alloc-sections <prefix>
                                   Add <prefix> to start of every allocatable
                                     section name
     --file-alignment <num>        Set PE file alignment to <num>
     --heap <reserve>[,<commit>]   Set PE reserve/commit heap to <reserve>/
                                   <commit>
     --image-base <address>        Set PE image base to <address>
     --section-alignment <num>     Set PE section alignment to <num>
     --stack <reserve>[,<commit>]  Set PE reserve/commit stack to <reserve>/
                                   <commit>
     --subsystem <name>[:<version>]
                                   Set PE subsystem to <name> [& <version>]
     --compress-debug-sections[={none|zlib|zlib-gnu|zlib-gabi}]
                                   Compress DWARF debug sections using zlib
     --decompress-debug-sections   Decompress DWARF debug sections using zlib
     --elf-stt-common=[yes|no]     Generate ELF common symbols with STT_COMMON
                                     type
     --verilog-data-width <number> Specifies data width, in bytes, for verilog output
  -M  --merge-notes                Remove redundant entries in note sections
      --no-merge-notes             Do not attempt to remove redundant notes (default)
  -v --verbose                     List all object files modified
  @<file>                          Read options from <file>
  -V --version                     Display this program's version number
  -h --help                        Display this output
     --info                        List object formats & architectures supported
arm-none-eabi-objcopy: supported targets: elf32-littlearm elf32-littlearm-fdpic elf32-bigarm elf32-bigarm-fdpic elf32-little elf32-big srec symbolsrec verilog tekhex binary ihex plugin
make[1]: [post-build] Error 1 (ignored)
' '

22:32:26 Build Finished (took 1s.59ms)

